schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type DataPoint {
  date: String!
  modified: String
  vaccinated: Int
}

type DataPointConnection {
  items: [DataPoint]
  nextToken: String
}

type Mutation {
  createDataPoint(input: CreateDataPointInput!): DataPoint
  deleteDataPoint(input: DeleteDataPointInput!): DataPoint
  updateDataPoint(input: UpdateDataPointInput!): DataPoint
}

type Query {
  getDataPoint(date: String!): DataPoint
  listDataPoints(filter: TableDataPointFilterInput, limit: Int, nextToken: String): DataPointConnection
}

type Subscription {
  onCreateDataPoint(date: String, modified: String, vaccinated: Int): DataPoint @aws_subscribe(mutations : ["createDataPoint"])
  onDeleteDataPoint(date: String, modified: String, vaccinated: Int): DataPoint @aws_subscribe(mutations : ["deleteDataPoint"])
  onUpdateDataPoint(date: String, modified: String, vaccinated: Int): DataPoint @aws_subscribe(mutations : ["updateDataPoint"])
}

input CreateDataPointInput {
  date: String!
  modified: String
  vaccinated: Int
}

input DeleteDataPointInput {
  date: String!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableDataPointFilterInput {
  date: TableStringFilterInput
  modified: TableStringFilterInput
  vaccinated: TableIntFilterInput
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateDataPointInput {
  date: String!
  modified: String
  vaccinated: Int
}
